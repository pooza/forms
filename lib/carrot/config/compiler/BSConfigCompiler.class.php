<?php
/**
 * @package jp.co.b-shock.carrot
 * @subpackage config.compiler
 */

/**
 * 抽象設定コンパイラ
 *
 * @author 小石達也 <tkoishi@b-shock.co.jp>
 */
abstract class BSConfigCompiler extends BSParameterHolder {
	use BSBasicObject;
	private $body;

	/**
	 * @access public
	 * @param string[] $params パラメータ
	 */
	public function __construct ($params = []) {
		$this->initialize($params);
	}

	/**
	 * 初期化
	 *
	 * @access public
	 * @param string[] $params パラメータ
	 * @return boolean 成功ならばTrue
	 * @static
	 */
	public function initialize ($params = []) {
		$this->setParameters($params);
	}

	/**
	 * 実行
	 *
	 * @access public
	 * @param BSConfigFile $file 設定ファイル
	 * @abstract
	 */
	abstract public function execute (BSConfigFile $file);

	/**
	 * コンパイル後のphpステートメントを返す
	 *
	 * @access protected
	 * @return string コンパイル結果
	 */
	protected function getBody () {
		return $this->body->join("\n");
	}

	/**
	 * phpステートメントを初期化
	 *
	 * @access protected
	 */
	protected function clearBody () {
		$this->body = new BSArray;
		$this->putLine('<?php');
		$this->putLine('// auth-generated by ' . get_class($this));
		$this->putLine('// date: ' . date('Y/m/d H:i:s'));
	}

	/**
	 * phpステートメントの末尾に1行追加
	 *
	 * @access public
	 * @param string $line phpステートメント
	 */
	protected function putLine ($line) {
		if ($line instanceof BSStringFormat) {
			$line = $line->getContents();
		}
		$this->body[] = $line;
	}

	/**
	 * 文字列のクォート
	 *
	 * @access public
	 * @param string $value 置換対象
	 * @return string 置換結果
	 * @static
	 */
	static public function quote ($value) {
		if (is_array($value) || ($value instanceof BSParameterHolder)) {
			$body =  new BSArray;
			foreach ($value as $key => $item) {
				$body[] = sprintf('%s => %s', self::quote($key), self::quote($item));
			}
			return sprintf('[%s]', $body->join(', '));
		} else {
			$value = trim($value);
			switch (BSString::toLower($value)) {
				case null:
					return 'null';
				case 'on':
				case 'yes':
				case 'true':
					return 'true';
				case 'off':
				case 'no':
				case 'false':
					return 'false';
				default:
					if (is_numeric($value) && !mb_ereg('^0', $value)) {
						return $value;
					} else {
						$value = str_replace("\\", "\\\\", $value);
						$value = str_replace("%'", "\"", $value);
						$value = str_replace("'", "\\'", $value);
						return "'" . $value . "'";
					}
			}
		}
	}

	/**
	 * 定数で置換
	 *
	 * @access protected
	 * @param string $value 置換対象
	 * @return string 置換結果
	 * @static
	 */
	static protected function replaceConstants ($value) {
		$value = str_replace('%%', '##PERCENT##', $value);
		$constants = new BSConstantHandler;
		foreach (BSString::eregMatchAll('%([_[:alnum:]]+)%', $value) as $matches) {
			$value = str_replace($matches[0], $constants[$matches[1]], $value);
		}
		$value = str_replace('##PERCENT##', '%', $value);
		return $value;
	}
}

/* vim:set tabstop=4: */
